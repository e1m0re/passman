// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "e1m0re/passman/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UsersDataRepository is an autogenerated mock type for the UsersDataRepository type
type UsersDataRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, data
func (_m *UsersDataRepository) AddItem(ctx context.Context, data models.UsersDataItemInfo) (*models.UsersDataItem, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 *models.UsersDataItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UsersDataItemInfo) (*models.UsersDataItem, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UsersDataItemInfo) *models.UsersDataItem); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UsersDataItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UsersDataItemInfo) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *UsersDataRepository) FindItemByID(ctx context.Context, id models.UsersDataItemID) (*models.UsersDataItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByID")
	}

	var r0 *models.UsersDataItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.UsersDataItemID) (*models.UsersDataItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.UsersDataItemID) *models.UsersDataItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UsersDataItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.UsersDataItemID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUsersDataRepository creates a new instance of UsersDataRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersDataRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersDataRepository {
	mock := &UsersDataRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
