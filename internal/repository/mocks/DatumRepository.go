// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/e1m0re/passman/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// DatumRepository is an autogenerated mock type for the DatumRepository type
type DatumRepository struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, datumInfo
func (_m *DatumRepository) AddItem(ctx context.Context, datumInfo model.DatumInfo) (*model.DatumItem, error) {
	ret := _m.Called(ctx, datumInfo)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 *model.DatumItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DatumInfo) (*model.DatumItem, error)); ok {
		return rf(ctx, datumInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.DatumInfo) *model.DatumItem); ok {
		r0 = rf(ctx, datumInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DatumItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.DatumInfo) error); ok {
		r1 = rf(ctx, datumInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindItemByFileName provides a mock function with given fields: ctx, fileName
func (_m *DatumRepository) FindItemByFileName(ctx context.Context, fileName string) (*model.DatumItem, error) {
	ret := _m.Called(ctx, fileName)

	if len(ret) == 0 {
		panic("no return value specified for FindItemByFileName")
	}

	var r0 *model.DatumItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.DatumItem, error)); ok {
		return rf(ctx, fileName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.DatumItem); ok {
		r0 = rf(ctx, fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DatumItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDatumRepository creates a new instance of DatumRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatumRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatumRepository {
	mock := &DatumRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
