// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"
	models "e1m0re/passman/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Authenticator is an autogenerated mock type for the Authenticator type
type Authenticator struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, credentials
func (_m *Authenticator) Login(ctx context.Context, credentials models.Credentials) (bool, error) {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Credentials) (bool, error)); ok {
		return rf(ctx, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Credentials) bool); ok {
		r0 = rf(ctx, credentials)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Credentials) error); ok {
		r1 = rf(ctx, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Registration provides a mock function with given fields: ctx, credentials
func (_m *Authenticator) Registration(ctx context.Context, credentials models.Credentials) (*models.User, error) {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for Registration")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Credentials) (*models.User, error)); ok {
		return rf(ctx, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.Credentials) *models.User); ok {
		r0 = rf(ctx, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.Credentials) error); ok {
		r1 = rf(ctx, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthenticator creates a new instance of Authenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Authenticator {
	mock := &Authenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
