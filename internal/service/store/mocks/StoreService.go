// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"
	fs "io/fs"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	model "github.com/e1m0re/passman/internal/model"

	proto "github.com/e1m0re/passman/pkg/proto"
)

// StoreService is an autogenerated mock type for the StoreService type
type StoreService struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: ctx, datumInfo
func (_m *StoreService) AddItem(ctx context.Context, datumInfo model.DatumInfo) (*model.DatumItem, error) {
	ret := _m.Called(ctx, datumInfo)

	if len(ret) == 0 {
		panic("no return value specified for AddItem")
	}

	var r0 *model.DatumItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.DatumInfo) (*model.DatumItem, error)); ok {
		return rf(ctx, datumInfo)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.DatumInfo) *model.DatumItem); ok {
		r0 = rf(ctx, datumInfo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DatumItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.DatumInfo) error); ok {
		r1 = rf(ctx, datumInfo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveFile provides a mock function with given fields: ctx, stream
func (_m *StoreService) SaveFile(ctx context.Context, stream grpc.ClientStreamingServer[proto.UploadItemRequest, proto.UploadItemResponse]) (fs.FileInfo, error) {
	ret := _m.Called(ctx, stream)

	if len(ret) == 0 {
		panic("no return value specified for SaveFile")
	}

	var r0 fs.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, grpc.ClientStreamingServer[proto.UploadItemRequest, proto.UploadItemResponse]) (fs.FileInfo, error)); ok {
		return rf(ctx, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, grpc.ClientStreamingServer[proto.UploadItemRequest, proto.UploadItemResponse]) fs.FileInfo); ok {
		r0 = rf(ctx, stream)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fs.FileInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, grpc.ClientStreamingServer[proto.UploadItemRequest, proto.UploadItemResponse]) error); ok {
		r1 = rf(ctx, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: ctx, id, stream
func (_m *StoreService) UploadFile(ctx context.Context, id string, stream grpc.ServerStreamingServer[proto.DownloadItemResponse]) error {
	ret := _m.Called(ctx, id, stream)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, grpc.ServerStreamingServer[proto.DownloadItemResponse]) error); ok {
		r0 = rf(ctx, id, stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStoreService creates a new instance of StoreService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStoreService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StoreService {
	mock := &StoreService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
