// Code generated by mockery v2.44.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/e1m0re/passman/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// UserProvider is an autogenerated mock type for the UserProvider type
type UserProvider struct {
	mock.Mock
}

// CheckPassword provides a mock function with given fields: ctx, user, password
func (_m *UserProvider) CheckPassword(ctx context.Context, user model.User, password string) (bool, error) {
	ret := _m.Called(ctx, user, password)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, string) (bool, error)); ok {
		return rf(ctx, user, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, string) bool); ok {
		r0 = rf(ctx, user, password)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, string) error); ok {
		r1 = rf(ctx, user, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, credentials
func (_m *UserProvider) CreateUser(ctx context.Context, credentials model.Credentials) (*model.User, error) {
	ret := _m.Called(ctx, credentials)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Credentials) (*model.User, error)); ok {
		return rf(ctx, credentials)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Credentials) *model.User); ok {
		r0 = rf(ctx, credentials)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Credentials) error); ok {
		r1 = rf(ctx, credentials)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindUserByUsername provides a mock function with given fields: ctx, username
func (_m *UserProvider) FindUserByUsername(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for FindUserByUsername")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserProvider creates a new instance of UserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProvider {
	mock := &UserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
